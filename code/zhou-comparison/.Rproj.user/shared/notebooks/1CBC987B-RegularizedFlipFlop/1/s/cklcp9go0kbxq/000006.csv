"0","setOption(matlab, ""readResult/interval"",30*6)"
"0","evaluate(matlab,""addpath('../KGlasso_code')"")"
"2","Received cmd: "
"2","1
"
"2","""eval"" string: """
"2","addpath('../KGlasso_code')""
"
"2","Sent byte: "
"2","0
"
"0","DetNorm <-function(A){"
"0","  n = dim(A)[1]"
"0","  return(A*det(A)^(-1/n))"
"0","}"
"0",""
"0","#define geodesic distance"
"0","GeodesicDistance <-function(P,Q){"
"0","  root = solve(sqrtm(Q))"
"0","  P = root %*% P %*% root"
"0","  return(norm(logm(P),""F""))"
"0","}"
"0",""
"0","#test geodesic distance"
"0","#A = diag(c(1,2,3))"
"0","#A = expm(A)"
"0","#GeodesicDistance(diag(c(1,1,1)), A)"
"0",""
"0",""
"0",""
"0","SpikedComparison <-function(SmallDimension,BigDimension,NumSamples,NumInstances=2,TrialsPerInstance=2,spike = 10, RegMin = -5, RegMax =5, RegStride=1){"
"0","  "
"0","  Regularizers = exp(RegStride*c(floor(RegMin/RegStride):floor(RegMax/RegStride)))"
"0","  print(Regularizers)"
"0","  results = data.frame(Regularizer = Regularizers,Gemini=0,RegSink = 0,Trivial=0, KGlasso = 0)"
"0","  #need to add the sample covariance back in :/"
"0","  "
"0","  #make copies for the other error metrics."
"0","  GeoResults = data.frame(results)"
"0","  OpResults = data.frame(results)"
"0","  "
"0","  setVariable(matlab, NumSamples=NumSamples, SmallDimension=SmallDimension, BigDimension=BigDimension)"
"0","  "
"0","  for (j in 1:length(Regularizers)){"
"0","    "
"0","    #for each value of the regularizer we will compute the error of the estimator on several ground truth covariances"
"0","    MatReg = (Regularizers[j])^(.1)"
"0","    "
"0","    setVariable(matlab, MatReg = MatReg)"
"0","    for (l in 1:NumInstances){ "
"0","  "
"0","      #define the covariances"
"0","      A = diag(SmallDimension)"
"0","      v = matrix(rnorm(SmallDimension),nrow = SmallDimension, ncol = 1)"
"0","      A = A + spike*v%*%t(v)"
"0","      rootA = sqrtm(A)"
"0","      invA = solve(A)"
"0","      invA = invA/tr(invA)"
"0","      normA = norm(invA,""F"")^2"
"0","    "
"0","      B = diag(BigDimension)"
"0","      v = matrix(rnorm(BigDimension),nrow = BigDimension, ncol = 1)"
"0","      B = B + spike*v%*%t(v)"
"0","      rootB = sqrtm(B)"
"0","      invB = solve(B)"
"0","    "
"0","      print(c(""regularizer: "", j))"
"0","      #for each covariance we will compute the estimate with fresh samples from the model a few times"
"0","      for(i in 1:TrialsPerInstance){"
"0","        "
"0","        #create the fresh samples"
"0","        X = list(0*c(1:NumSamples))"
"0","        dat = matrix(0, ncol = NumSamples, nrow = SmallDimension*BigDimension)"
"0","        for(i in 1:NumSamples){"
"0","          "
"0","          #create the data"
"0","          X[[i]] = rootA%*%matrix(rnorm(SmallDimension*BigDimension,sd=1), nrow=SmallDimension, ncol=BigDimension)%*%rootB"
"0","          #also create it for matlab format -_-"
"0","          dat[,i] = X[[i]]"
"0","          "
"0","        }"
"0","        "
"0","        #trivial frobenius error"
"0","        TrivialError = norm(invA - diag(SmallDimension)/SmallDimension,""F"")^2 / normA"
"0","        results$Trivial[j] = results$Trivial[j]+ TrivialError/(NumInstances*TrialsPerInstance)"
"0","        "
"0","        #operator error"
"0","        OpTrivialError = norm(invA - diag(SmallDimension)/SmallDimension,""I"")^2"
"0","        OpResults$Trivial[j] = OpResults$Trivial[j]+ OpTrivialError/(NumInstances*TrialsPerInstance)"
"0","        "
"0","        #geodesic trivial"
"0","        GeoTrivialError = GeodesicDistance(DetNorm(invA), diag(SmallDimension))"
"0","        "
"0","        #GeoResults$Trivial[j] = GeoResults$Trivial[j] + GeoTrivialError/(NumInstances*TrialsPerInstance)"
"0","        GeoResults$Trivial[j] = GeoResults$Trivial[j] + 1/(NumInstances*TrialsPerInstance)"
"0","        "
"0","        #gemini"
"0","        #set gemini penalties"
"0","        GeminiRegFactor = 1*sqrt(log(SmallDimension)/BigDimension)"
"0","        tic(""geminiB"")"
"0","        out <- GeminiBmult(X, GeminiRegFactor*Regularizers[j], penalize.diagonal=FALSE)"
"0","        toc()"
"0","        GeminiEstimate = out$B.hat.inv"
"0","        #calculate frobenius error"
"0","        GeminiError = norm(invA - (GeminiEstimate/tr(GeminiEstimate)),""F"")^2 / normA"
"0","        results$Gemini[j] = results$Gemini[j]+ GeminiError/(NumInstances*TrialsPerInstance)"
"0","        "
"0","        #operator error"
"0","        OpGeminiError = norm(invA - (GeminiEstimate/tr(GeminiEstimate)),""I"")^2"
"0","        OpResults$Gemini[j] = OpResults$Gemini[j]+ OpGeminiError/(NumInstances*TrialsPerInstance)"
"0","        "
"0","        #calculate geodesic error"
"0","        GeoGeminiError = GeodesicDistance(DetNorm(invA), DetNorm(GeminiEstimate))^2/GeoTrivialError^2"
"0","        GeoResults$Gemini[j] = GeoResults$Gemini[j] + GeoGeminiError/(NumInstances*TrialsPerInstance)"
"0","        "
"0","        #regularized Sinkhorn"
"0","        #set sinkhorn penalties"
"0","        RegSinkFactor = 10"
"0","        tic(""regularized sinkhorn"")"
"0","        RegSinkEstimate = regsinkhorn(X,tol = .1*Regularizers[j], reg = Regularizers[j]*RegSinkFactor)[[1]]"
"0","        toc()"
"0","        "
"0","        #calculate frobenius"
"0","        RegSinkError = norm(invA - (RegSinkEstimate/tr(RegSinkEstimate)),""F"")^2 / normA"
"0","        results$RegSink[j] = results$RegSink[j]+ RegSinkError/(NumInstances*TrialsPerInstance)"
"0","        "
"0","        #operator error"
"0","        OpSinkError = norm(invA - (RegSinkEstimate/tr(RegSinkEstimate)),""I"")^2"
"0","        OpResults$RegSink[j] = OpResults$RegSink[j]+ OpSinkError/(NumInstances*TrialsPerInstance)"
"0","        "
"0","        #geodesic distance"
"0","        GeoSinkError = GeodesicDistance(DetNorm(invA), DetNorm(RegSinkEstimate))^2/GeoTrivialError^2"
"0","        GeoResults$RegSink[j] = GeoResults$RegSink[j] + GeoSinkError/(NumInstances*TrialsPerInstance)"
"0","        "
"0","        #KGlasso "
"0","        print(c(""MatReg, "", MatReg))"
"0","        setVariable(matlab, dat = dat)"
"0","        evaluate(matlab,""[C,D] = KGL_R(dat,SmallDimension,BigDimension,NumSamples,MatReg,MatReg,10,.01);"")"
"0","        KGlassoEstimate = getVariable(matlab,""C"")$C"
"0",""
"0","        KGlassoError = norm(invA - (KGlassoEstimate/tr(KGlassoEstimate)),""F"")^2 / normA"
"0","        #print(c(""Glasso Error: "",KGlassoError))"
"0","        results$KGlasso[j] = results$KGlasso[j]+ KGlassoError/(NumInstances*TrialsPerInstance)"
"0",""
"0","        #operator error"
"0","        OpKGlassoError = norm(invA - (KGlassoEstimate/tr(KGlassoEstimate)),""I"")^2"
"0","        OpResults$KGlasso[j] = OpResults$KGlasso[j]+ OpKGlassoError/(NumInstances*TrialsPerInstance)"
"0","        "
"0","        #geodesic distance"
"0","        GeoKGlassoError = GeodesicDistance(DetNorm(invA), DetNorm(KGlassoEstimate))^2/GeoTrivialError^2"
"0","        GeoResults$KGlasso[j] = GeoResults$KGlasso[j] + GeoKGlassoError/(NumInstances*TrialsPerInstance)"
"0","        "
"0","        "
"0","      }"
"0","    }"
"0","  }"
"0","  output<- list(Results = results,OpResults = OpResults, GeoResults = GeoResults)"
"0","}"
